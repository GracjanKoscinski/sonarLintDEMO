{"$schema":"https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0.json","version":"2.1.0","runs":[{"tool":{"driver":{"name":"Sonarlint","informationUri":"https://github.com/Lucas3oo/sonarlint-gradle-plugin","version":"1.0.0","rules":[{"id":"java:S106","helpUri":"https://rules.sonarsource.com/Java/RSPEC-106","defaultConfiguration":{"level":"error"},"shortDescription":{"text":"Replace this use of System.out by a logger."},"fullDescription":{"text":"Replace this use of System.out by a logger."},"help":{"text":"","markdown":"Why is this an issue?\n---------------------\n\nIn software development, logs serve as a record of events within an application, providing crucial insights for debugging. When logging, it is essential to ensure that the logs are:\n\n*   easily accessible\n*   uniformly formatted for readability\n*   properly recorded\n*   securely logged when dealing with sensitive data\n\nThose requirements are not met if a program directly writes to the standard outputs (e.g., System.out, System.err). That is why defining and using a dedicated logger is highly recommended.\n\n### Code examples\n\nThe following noncompliant code:\n\nclass MyClass { public void doSomething() { System.out.println(\"My Message\"); // Noncompliant, output directly to System.out without a logger } } \n\nCould be replaced by:\n\nimport java.util.logging.Logger; class MyClass { Logger logger = Logger.getLogger(getClass().getName()); public void doSomething() { // ... logger.info(\"My Message\"); // Compliant, output via logger // ... } } \n\nResources\n---------\n\n### Documentation\n\n*   [Java SE 7 API Specification: java.util.logging.Logger](https://docs.oracle.com/javase/7/docs/api/java/util/logging/Logger.html)\n*   [OWASP Top 10 2021 Category A9](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/) - Security Logging and Monitoring Failures\n*   [OWASP Top 10 2017 Category A3](https://www.owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure) - Sensitive Data Exposure\n*   [CERT, ERR02-J.](https://wiki.sei.cmu.edu/confluence/x/nzdGBQ) - Prevent exceptions while logging data"},"properties":{"tags":["CODE_SMELL","bad-practice","cert"]}},{"id":"java:S101","helpUri":"https://rules.sonarsource.com/Java/RSPEC-101","defaultConfiguration":{"level":"warning"},"shortDescription":{"text":"Rename this class name to match the regular expression '^[A-Z][a-zA-Z0-9]*$'."},"fullDescription":{"text":"Rename this class name to match the regular expression '^[A-Z][a-zA-Z0-9]*$'."},"help":{"text":"","markdown":"Why is this an issue?\n---------------------\n\nShared naming conventions allow teams to collaborate efficiently.\n\nThis rule raises an issue when a class name does not match a provided regular expression.\n\nFor example, with the default provided regular expression `^[A-Z][a-zA-Z0-9]*$`, the class:\n\n```\n\nclass my_class {...} // Noncompliant\n```\n\nshould be renamed to\n\n```\n\nclass MyClass {...}\n```"},"properties":{"tags":["CODE_SMELL","convention"]}},{"id":"java:S120","helpUri":"https://rules.sonarsource.com/Java/RSPEC-120","defaultConfiguration":{"level":"warning"},"shortDescription":{"text":"Rename this package name to match the regular expression '^[a-z_]+(\\.[a-z_][a-z0-9_]*)*$'."},"fullDescription":{"text":"Rename this package name to match the regular expression '^[a-z_]+(\\.[a-z_][a-z0-9_]*)*$'."},"help":{"text":"","markdown":"Why is this an issue?\n---------------------\n\nShared naming conventions improve readability and allow teams to collaborate efficiently. This rule checks that all package names match a provided regular expression.\n\nHow to fix it\n-------------\n\nRename packages with the expected naming convention\n\n### Code examples\n\n#### Noncompliant code example\n\nWith the default regular expression `^[a-z_]+(\\.[a-z_][a-z0-9_]*)*$`:\n\npackage org.exAmple; // Noncompliant \n\n#### Compliant solution\n\npackage org.example;"},"properties":{"tags":["CODE_SMELL","convention"]}},{"id":"java:S1068","helpUri":"https://rules.sonarsource.com/Java/RSPEC-1068","defaultConfiguration":{"level":"error"},"shortDescription":{"text":"Remove this unused \"name\" private field."},"fullDescription":{"text":"Remove this unused \"name\" private field."},"help":{"text":"","markdown":"Why is this an issue?\n---------------------\n\nIf a `private` field is declared but not used locally, its limited visibility makes it dead code.\n\nThis is either a sign that some logic is missing or that the code should be cleaned.\n\nCleaning out dead code decreases the size of the maintained codebase, making it easier to understand and preventing bugs from being introduced.\n\n```\n\npublic class MyClass {\n  private int foo = 42; // Noncompliant: foo is unused and should be removed\n\n  public int compute(int a) {\n    return a * 42;\n  }\n\n}\n```\n\nNote that this rule does not take reflection into account, which means that issues will be raised on `private` fields that are only accessed using the reflection API.\n\n### Exceptions\n\nThe rule admits 3 exceptions:\n\n*   Serialization ID fields\n\nThe Java serialization runtime associates with each serializable class a version number called `serialVersionUID`, which is used during deserialization to verify that the sender and receiver of a serialized object have loaded classes for that object that are compatible for serialization.\n\nA serializable class can declare its own `serialVersionUID` explicitly by declaring a field named `serialVersionUID` that must be static, final, and of type long. By definition, those `serialVersionUID` fields should not be reported by this rule:\n\n```\n\npublic class MyClass implements java.io.Serializable {\n  private static final long serialVersionUID = 42L;  // Compliant by exception\n}\n```\n\n*   Annotated fields\n\nThe unused field in this class will not be reported by the rule as it is annotated.\n\n```\n\npublic class MyClass {\n  @SomeAnnotation\n  private int unused;  // Compliant by exception\n}\n```\n\n*   Fields from classes with native methods\n\nThe unused field in this class will not be reported by the rule as it might be used by native code.\n\n```\n\npublic class MyClass {\n  private int unused = 42;  // Compliant by exception\n  private native static void doSomethingNative();\n}\n```"},"properties":{"tags":["CODE_SMELL","unused"]}}]}},"results":[{"ruleId":"java:S106","level":"error","message":{"text":"Replace this use of System.out by a logger."},"locations":[{"physicalLocation":{"artifactLocation":{"uriBaseId":"file:///home/gkoscinski/SONAR/sonarLintDEMO/sonar/","uri":"src/main/java/org/example/Main.java"},"region":{"startLine":10,"startColumn":8,"endLine":10,"endColumn":18}}}]},{"ruleId":"java:S101","level":"warning","message":{"text":"Rename this class name to match the regular expression '^[A-Z][a-zA-Z0-9]*$'."},"locations":[{"physicalLocation":{"artifactLocation":{"uriBaseId":"file:///home/gkoscinski/SONAR/sonarLintDEMO/sonar/","uri":"src/main/java/org/example/PACKAGE/PACKA_GE.java"},"region":{"startLine":3,"startColumn":13,"endLine":3,"endColumn":21}}}]},{"ruleId":"java:S120","level":"warning","message":{"text":"Rename this package name to match the regular expression '^[a-z_]+(\\.[a-z_][a-z0-9_]*)*$'."},"locations":[{"physicalLocation":{"artifactLocation":{"uriBaseId":"file:///home/gkoscinski/SONAR/sonarLintDEMO/sonar/","uri":"src/main/java/org/example/PACKAGE/PACKA_GE.java"},"region":{"startLine":1,"startColumn":8,"endLine":1,"endColumn":27}}}]},{"ruleId":"java:S1068","level":"error","message":{"text":"Remove this unused \"name\" private field."},"locations":[{"physicalLocation":{"artifactLocation":{"uriBaseId":"file:///home/gkoscinski/SONAR/sonarLintDEMO/sonar/","uri":"src/main/java/org/example/PACKAGE/PACKA_GE.java"},"region":{"startLine":4,"startColumn":19,"endLine":4,"endColumn":23}}}]}]}]}